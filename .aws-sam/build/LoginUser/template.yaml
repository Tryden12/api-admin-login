AWSTemplateFormatVersion: 2010-09-09
Description: >-
  api-admin-login

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  Module:
    Type: String
    Default: api-admin-login
  Project:
    Type: String
    Default: apr
  Env:
    Type: String
    Default: dev
  JwtSsmParameterName:
    Type: String
    Default: jwt-secret


Globals:
  Function:
    Runtime: nodejs20.x
    # CodeUri: src/
    Handler: src/index.handler
    Timeout: 30
    MemorySize: 1024
    Architectures:
      - x86_64
    Environment:
      Variables:
        PROJECT: !Ref Project
        ENV: !Ref Env
        USER_TABLE: !Ref UserTable

Resources:

# API Gateway Setup
  AdminLoginApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Env
      Description: API supporting admin functionalities.
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT'"
        AllowOrigin: "'*'"
        


  # Lambda function for api health checks
  HealthCheck:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub healthCheck-${Env}-${Module}
      Description: GET method to get the health status of the api.
      Events:
        HealthCheck:
          Type: Api
          Properties:
            RestApiId: !Ref AdminLoginApi
            Path: /health
            Method: GET

  # Lambda function config associated with the service source code: register.mjs
  RegisterUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub registerUser-${Env}-${Module}
      Description: POST method to register an admin user for updating admin user table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref AdminLoginApi
            Path: /register
            Method: POST

  # Lambda function config associated with the service source code: login.mjs
  LoginUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub userLogin-${Env}-${Module}
      Description: POST method to login an admin user for updating admin user table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        LoginUser:
          Type: Api
          Properties:
            RestApiId: !Ref AdminLoginApi
            Path: /login
            Method: POST

  # Lambda function config associated with the service source code: verify.mjs
  VerifyUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub verifyUser-${Env}-${Module}
      Description: POST method to verify a user.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        VerifyUser:
          Type: Api
          Properties:
            RestApiId: !Ref AdminLoginApi
            Path: /verify
            Method: POST

  # Database
  UserTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub admin-user-table-${Env}
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: UsernameIndex
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

Outputs:
  AdminLoginApi:
    Description: API Gateway endpoint URL for ${Env} stage admin login 
    Value:
      Fn::Sub: https://${AdminLoginApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}/admin/
